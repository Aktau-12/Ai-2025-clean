from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from app.models.user import User
from app.models.hero import UserHeroProgress
from app.database.db import SessionLocal
from app.routes.auth import get_current_user
from pydantic import BaseModel
from passlib.hash import bcrypt

router = APIRouter()

# ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# ‚úÖ –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
def hash_password(password: str) -> str:
    return bcrypt.hash(password)

# ‚úÖ –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class UserCreate(BaseModel):
    email: str
    password: str
    name: str

# ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.post("/register", response_model=dict)
def register_user(user_data: UserCreate, db: Session = Depends(get_db)):
    if db.query(User).filter(User.email == user_data.email).first():
        raise HTTPException(status_code=400, detail="‚õî –≠—Ç–æ—Ç email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

    hashed_password = hash_password(user_data.password)

    # 1. –°–æ–∑–¥–∞—ë–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = User(
        email=user_data.email,
        name=user_data.name,
        password_hash=hashed_password,
        archetype=None
    )
    db.add(user)
    db.commit()
    db.refresh(user)  # ‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ: –ø–æ–ª—É—á–∏—Ç—å ID –¥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

    # üì§ –õ–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å:
    print(f"‚úÖ USER REGISTERED: id={user.id}, email={user.email}")

    # 2. –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≥–µ—Ä–æ—è
    progress = UserHeroProgress(user_id=user.id, xp=0)
    db.add(progress)
    db.commit()

    return {
        "message": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!",
        "user_id": user.id
    }

# ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.get("/me")
def get_me(user: User = Depends(get_current_user)):
    return {
        "id": user.id,
        "email": user.email,
        "name": user.name,
        "mbti_type": user.mbti_type,
        "archetype": user.archetype,
        "created_at": user.created_at,
    }
