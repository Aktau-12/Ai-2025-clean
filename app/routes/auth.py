from fastapi import APIRouter, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from datetime import datetime, timedelta
from typing import Optional
from jose import jwt, JWTError
from sqlalchemy.orm import Session
from passlib.context import CryptContext
from app.database.db import SessionLocal
from app.models.user import User
from pydantic import BaseModel
from dotenv import load_dotenv
from pathlib import Path
import os

# üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑ –ø–∞–ø–∫–∏ app ( –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞)
load_dotenv(Path(__file__).resolve().parent.parent / ".env")

# üîê JWT –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SECRET_KEY = os.getenv("SECRET_KEY")
ALGORITHM = os.getenv("ALGORITHM", "HS256")
ACCESS_TOKEN_EXPIRE_MINUTES = int(os.getenv("ACCESS_TOKEN_EXPIRE_MINUTES", 1440))

if not SECRET_KEY:
    raise RuntimeError("‚ùå SECRET_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

# ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
router = APIRouter()
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="auth/login")

# üìæ Pydantic-–º–æ–¥–µ–ª—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
class UserCreate(BaseModel):
    email: str
    password: str
    name: Optional[str] = None  # üëà –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ name

# üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π
def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password):
    return pwd_context.hash(password)

# üîë –°–æ–∑–¥–∞–Ω–∏–µ JWT-—Ç–æ–∫–µ–Ω–∞
def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)

# üîó –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ë–î
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞
def get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)):
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        email: str = payload.get("sub")
        if not email:
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="‚õîÔ∏è –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–æ–∫–µ–Ω")
    except JWTError:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="‚õîÔ∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω")

    user = db.query(User).filter(User.email == email).first()
    if not user:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="‚õîÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return user

# üîê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@router.post("/register")
def register_user(user_data: UserCreate, db: Session = Depends(get_db)):
    if db.query(User).filter(User.email == user_data.email).first():
        raise HTTPException(status_code=400, detail="‚õîÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    hashed_password = get_password_hash(user_data.password)
    new_user = User(
        email=user_data.email,
        password_hash=hashed_password,
        name=user_data.name or user_data.email,  # üëà –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
        xp=0
    )
    db.add(new_user)
    db.commit()
    db.refresh(new_user)

    # ‚ú® –°—Ä–∞–∑—É –≤—ã–¥–∞—ë–º JWT-—Ç–æ–∫–µ–Ω
    access_token = create_access_token(data={"sub": new_user.email})
    return {
        "access_token": access_token,
        "token_type": "bearer",
        "user": {
            "id": new_user.id,
            "email": new_user.email,
            "name": new_user.name
        }
    }

# üîê –õ–æ–≥–∏–Ω
@router.post("/login")
def login(user_data: UserCreate, db: Session = Depends(get_db)):
    user = db.query(User).filter(User.email == user_data.email).first()
    if not user or not verify_password(user_data.password, user.password_hash):
        raise HTTPException(status_code=401, detail="‚õîÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

    token = create_access_token(data={"sub": user.email})
    return {"access_token": token, "token_type": "bearer"}

# üîê –¢–µ—Å—Ç –∑–∞—â–∏—â—ë–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
@router.get("/protected")
def protected_route(user: User = Depends(get_current_user)):
    return {"message": f"–ü—Ä–∏–≤–µ—Ç, {user.name}! üîê –≠—Ç–æ –∑–∞—â–∏—â—ë–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç."}
