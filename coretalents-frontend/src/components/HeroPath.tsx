import React, { useEffect, useState } from "react";
import { getHeroArchetype } from "../utils/getHeroArchetype";
import archetypes from "../data/hero_archetypes.json";
import stepsData from "../data/hero_steps.json";
import axios from "axios";
import HeroCoach from "./HeroCoach";

const API_URL = import.meta.env.VITE_API_URL;

export default function HeroPath() {
  const [archetype, setArchetype] = useState<any>(null);
  const [checkedSteps, setCheckedSteps] = useState<Record<string, boolean>>({});
  const [loading, setLoading] = useState(true);
  const [userProfile, setUserProfile] = useState<any>(null);

  const heroPathStages = [
    "ü™û –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ",
    "üö∂ –ü–µ—Ä–≤—ã–µ —à–∞–≥–∏",
    "üß† –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–æ—Å—Ç",
    "üî• –ò—Å–ø—ã—Ç–∞–Ω–∏—è",
    "üèÜ –†–∞—Å–∫—Ä—ã—Ç–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞",
  ];

  useEffect(() => {
    const fetchData = async () => {
      try {
        const token = localStorage.getItem("token");
        if (!token) return;

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userRes = await axios.get(`${API_URL}/users/me`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        const userData = userRes.data;

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≥–µ—Ä–æ—è
        const progressRes = await axios.get(`${API_URL}/hero/progress`, {
          headers: { Authorization: `Bearer ${token}` },
        });

        const completedSteps: string[] = progressRes.data || [];
        const progressMap: Record<string, boolean> = {};
        completedSteps.forEach((id) => {
          progressMap[id] = true;
        });
        setCheckedSteps(progressMap);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        setUserProfile({
          mbti: userData.mbti_type,
          bigfive: userData.bigfive_scores || {}, // –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –æ—Ç–¥–∞—ë—Ç
          coretalents: userData.coretalents || [],
        });

        const hero = getHeroArchetype({
          mbti: userData.mbti_type,
          bigfive: userData.bigfive_scores,
          coretalents: userData.coretalents,
        });

        setArchetype(hero);
      } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  const handleStepToggle = async (stepId: string) => {
    const updated = !checkedSteps[stepId];
    setCheckedSteps((prev) => ({ ...prev, [stepId]: updated }));

    try {
      const token = localStorage.getItem("token");
      await axios.post(
        `${API_URL}/hero/progress`,
        { step_id: stepId, completed: updated },
        { headers: { Authorization: `Bearer ${token}` } }
      );
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —à–∞–≥–∞:", err);
    }
  };

  if (loading) {
    return <div className="p-6 text-center">‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—É—Ç–∏ –≥–µ—Ä–æ—è...</div>;
  }

  const completedCount = Object.values(checkedSteps).filter(Boolean).length;
  const totalSteps = stepsData.flatMap((stage) => stage.steps).length;
  const progressPercent = ((completedCount / totalSteps) * 100).toFixed(0);

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤
  const currentStage = Math.min(
    Math.floor((completedCount / totalSteps) * heroPathStages.length) + 1,
    heroPathStages.length
  );

  const stageData = stepsData.find((s) => s.stage === currentStage);

  return (
    <div className="p-6 max-w-3xl mx-auto space-y-8">
      <h2 className="text-3xl font-bold text-center">üõ§Ô∏è –ü—É—Ç—å –≥–µ—Ä–æ—è</h2>

      {archetype && (
        <div className="bg-white p-6 rounded-lg shadow text-center">
          <h3 className="text-2xl font-semibold text-purple-600 mb-2">
            üß¨ –¢–≤–æ–π –∞—Ä—Ö–µ—Ç–∏–ø: {archetype.name}
          </h3>
          <p className="text-gray-700">{archetype.description}</p>
        </div>
      )}

      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –ø—É—Ç–∏ */}
      <div className="bg-blue-100 p-4 rounded-lg text-center text-blue-700 font-medium">
        –ü—Ä–æ–≥—Ä–µ—Å—Å –ø—É—Ç–∏: {completedCount} –∏–∑ {totalSteps} —à–∞–≥–æ–≤ ({progressPercent}%)
      </div>

      {/* –≠—Ç–∞–ø—ã –ø—É—Ç–∏ */}
      <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
        {heroPathStages.map((stage, index) => (
          <div
            key={index}
            className={`border p-4 rounded-xl transition text-center font-medium ${
              index + 1 === currentStage
                ? "bg-purple-100 border-purple-400"
                : "bg-gray-100 border-gray-200 opacity-70"
            }`}
          >
            {stage}
          </div>
        ))}
      </div>

      {/* –¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏ */}
      {stageData && (
        <div className="space-y-4">
          <h4 className="text-xl font-semibold">
            ‚úÖ –ó–∞–¥–∞—á–∏ –Ω–∞ —ç—Ç–∞–ø–µ ¬´{stageData.title}¬ª
          </h4>
          <ul className="space-y-3">
            {stageData.steps.map((step) => (
              <li
                key={step.id}
                className={`flex items-center justify-between p-3 rounded-md border ${
                  checkedSteps[step.id]
                    ? "bg-green-100 border-green-400"
                    : "bg-white border-gray-300"
                }`}
              >
                <label className="flex items-center gap-2 cursor-pointer">
                  <input
                    type="checkbox"
                    checked={checkedSteps[step.id] || false}
                    onChange={() => handleStepToggle(step.id)}
                    className="w-5 h-5"
                  />
                  <span className="text-sm">{step.text}</span>
                </label>
                <span className="text-xs text-gray-500">üéØ {step.points} XP</span>
              </li>
            ))}
          </ul>
        </div>
      )}

      {/* AI-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ */}
      {userProfile && (
        <HeroCoach
          archetype={archetype}
          bigfive={userProfile.bigfive}
          completedSteps={Object.keys(checkedSteps).filter((key) => checkedSteps[key])}
        />
      )}
    </div>
  );
}
