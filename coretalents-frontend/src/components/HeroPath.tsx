import React, { useEffect, useState } from "react";
import { getHeroArchetype } from "../utils/getHeroArchetype";
import archetypes from "../data/hero_archetypes.json";
import stepsData from "../data/hero_steps.json";
import axios from "axios";
import HeroCoach from "./HeroCoach";

export default function HeroPath() {
  const [archetype, setArchetype] = useState<any>(null);
  const [checkedSteps, setCheckedSteps] = useState<Record<string, boolean>>({});
  const [loading, setLoading] = useState(true);

  const userProfile = {
    mbti: "ENFP",
    bigfive: {
      O: 80,
      C: 55,
      E: 65,
      A: 60,
      N: 30,
    },
    coretalents: ["–í–∏–∑–∏–æ–Ω–µ—Ä", "–ò–¥–µ–∞—Ç–æ—Ä", "–ú–æ—Ç–∏–≤–∞—Ç–æ—Ä"],
  };

  const heroPathStages = [
    "ü™û –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ",
    "üö∂ –ü–µ—Ä–≤—ã–µ —à–∞–≥–∏",
    "üß† –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–æ—Å—Ç",
    "üî• –ò—Å–ø—ã—Ç–∞–Ω–∏—è",
    "üèÜ –†–∞—Å–∫—Ä—ã—Ç–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞",
  ];

  const currentStage = 1;
  const stageData = stepsData.find((s) => s.stage === currentStage);

  useEffect(() => {
    const fetchProgress = async () => {
      try {
        const token = localStorage.getItem("token");
        const res = await axios.get("http://localhost:8000/hero/progress", {
          headers: { Authorization: `Bearer ${token}` },
        });

        const completedSteps: string[] = res.data;
        const progressMap: Record<string, boolean> = {};
        completedSteps.forEach((id) => {
          progressMap[id] = true;
        });
        setCheckedSteps(progressMap);
      } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:", err);
      } finally {
        setLoading(false);
      }
    };

    const result = getHeroArchetype(userProfile);
    setArchetype(result);
    fetchProgress();
  }, []);

  const handleStepToggle = async (stepId: string) => {
    const updated = !checkedSteps[stepId];
    setCheckedSteps((prev) => ({ ...prev, [stepId]: updated }));

    try {
      const token = localStorage.getItem("token");
      await axios.post(
        "http://localhost:8000/hero/progress",
        { step_id: stepId, completed: updated },
        { headers: { Authorization: `Bearer ${token}` } }
      );
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —à–∞–≥–∞:", err);
    }
  };

  if (loading) return <div className="p-6 text-center">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—É—Ç–∏ –≥–µ—Ä–æ—è...</div>;

  return (
    <div className="p-6 max-w-3xl mx-auto space-y-6">
      <h2 className="text-3xl font-bold text-center">üõÑ –ü—É—Ç—å –≥–µ—Ä–æ—è</h2>

      {archetype && (
        <div className="bg-white p-5 rounded-lg shadow">
          <h3 className="text-xl font-semibold mb-2 text-purple-600">
            üß¨ –¢–≤–æ–π –∞—Ä—Ö–µ—Ç–∏–ø: {archetype.name}
          </h3>
          <p className="text-gray-700">{archetype.description}</p>
        </div>
      )}

      <div className="mt-6 space-y-4">
        <h4 className="text-lg font-semibold">üå± –≠—Ç–∞–ø—ã —Ç–≤–æ–µ–≥–æ –ø—É—Ç–∏:</h4>
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          {heroPathStages.map((stage, index) => (
            <div
              key={index}
              className={`border rounded-xl p-4 transition shadow-sm ${
                index + 1 === currentStage
                  ? "bg-purple-100 border-purple-400"
                  : "bg-gray-100 border-gray-200 opacity-70"
              }`}
            >
              <div className="text-lg font-bold mb-1">{stage}</div>
              <p className="text-sm text-gray-600">
                {index === 0
                  ? "–ù–∞—á–Ω–∏ –ø—É—Ç—å —Å —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å–≤–æ–∏—Ö —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω."
                  : index === 1
                  ? "–£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–≤—É—é —Ü–µ–ª—å –∏ –Ω–∞—á–Ω–∏ –¥–≤–∏–∂–µ–Ω–∏–µ."
                  : index === 2
                  ? "–†–∞–∑–≤–∏–≤–∞–π –ø—Ä–∏–≤—ã—á–∫–∏, —Ñ–∏–∫—Å–∏—Ä—É–π —É—Å–ø–µ—Ö–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ."
                  : index === 3
                  ? "–ü—Ä–æ—Ö–æ–¥–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∏, –ø—Ä–µ–æ–¥–æ–ª–µ–≤–∞–π —Å—Ç—Ä–∞—Ö–∏, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π."
                  : "–¢—ã –≥–æ—Ç–æ–≤ —Å—Ç–∞—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º –∏–ª–∏ –ª–∏–¥–µ—Ä–æ–º –¥–ª—è –¥—Ä—É–≥–∏—Ö."}
              </p>
            </div>
          ))}
        </div>
      </div>

      {stageData && (
        <div className="mt-8">
          <h4 className="text-lg font-semibold mb-2">
            ‚úÖ –ó–∞–¥–∞—á–∏ –Ω–∞ —ç—Ç–∞–ø–µ ¬´{stageData.title}¬ª
          </h4>
          <ul className="space-y-3">
            {stageData.steps.map((step) => (
              <li
                key={step.id}
                className={`flex items-center justify-between p-3 rounded-md border ${
                  checkedSteps[step.id]
                    ? "bg-green-100 border-green-400"
                    : "bg-white border-gray-300"
                }`}
              >
                <label className="flex items-center gap-2 cursor-pointer">
                  <input
                    type="checkbox"
                    checked={checkedSteps[step.id] || false}
                    onChange={() => handleStepToggle(step.id)}
                    className="w-5 h-5"
                  />
                  <span className="text-sm">{step.text}</span>
                </label>
                <span className="text-xs text-gray-500">
                  üéØ {step.points} XP
                </span>
              </li>
            ))}
          </ul>
        </div>
      )}

      <HeroCoach
        archetype={archetype}
        bigfive={userProfile.bigfive}
        completedSteps={Object.keys(checkedSteps).filter((key) => checkedSteps[key])}
      />
    </div>
  );
}
