import React, { useState } from "react";
import HabitTracker from "../pages/HabitTracker";

const steps = [
  { question: "üß† –ö–∞–∫–∞—è —É —Ç–µ–±—è —Å–µ–π—á–∞—Å –∑–∞–¥–∞—á–∞ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞?", placeholder: "–û–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ" },
  { question: "üîç –ß—Ç–æ —Ç—ã —É–∂–µ –ø—Ä–æ–±–æ–≤–∞–ª —Å–¥–µ–ª–∞—Ç—å?", placeholder: "–û–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ" },
  { question: "üéØ –ö–∞–∫–∞—è —Ç–≤–æ—è –∫–æ–Ω–µ—á–Ω–∞—è —Ü–µ–ª—å?", placeholder: "–û–ø–∏—à–∏" },
  { question: "üß© –ö–∞–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã —É —Ç–µ–±—è –µ—Å—Ç—å?", placeholder: "–õ—é–¥–∏, –∑–Ω–∞–Ω–∏—è, –æ–ø—ã—Ç" },
  { question: "üöß –ö–∞–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è?", placeholder: "–°—Ç—Ä–∞—Ö–∏, –Ω–µ—Ö–≤–∞—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏" },
  { question: "üí° –ú–∏–Ω–∏–º—É–º 3 –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–∏?", placeholder: "–¢—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞" },
  { question: "‚úÖ –ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤—ã–±–∏—Ä–∞–µ—à—å?", placeholder: "–í—ã–±–µ—Ä–∏ –ª—É—á—à–∏–π" },
  { question: "üìÖ –ö–æ–≥–¥–∞ –Ω–∞—á–Ω—ë—à—å?", placeholder: "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è" },
];

const ThinkingAlgorithm = () => {
  const [stepIndex, setStepIndex] = useState(0);
  const [answers, setAnswers] = useState<string[]>(Array(steps.length).fill(""));
  const [finished, setFinished] = useState(false);
  const [addHabit, setAddHabit] = useState(false);

  const handleNext = () => {
    if (stepIndex < steps.length - 1) {
      setStepIndex((prev) => prev + 1);
    } else {
      setFinished(true);
    }
  };

  const handleBack = () => {
    if (stepIndex > 0) {
      setStepIndex((prev) => prev - 1);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const newAnswers = [...answers];
    newAnswers[stepIndex] = e.target.value;
    setAnswers(newAnswers);
  };

  if (finished) {
    return (
      <div className="bg-white rounded-xl shadow p-6 space-y-6 text-center">
        <h2 className="text-2xl font-bold text-green-600 mb-4">üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∞–ª–≥–æ—Ä–∏—Ç–º –º—ã—à–ª–µ–Ω–∏—è!</h2>
        <div className="text-left space-y-3">
          {steps.map((step, idx) => (
            <div key={idx} className="border-b pb-2">
              <p className="font-semibold">{step.question}</p>
              <p className="text-gray-700">{answers[idx] || "–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ"}</p>
            </div>
          ))}
        </div>

        {!addHabit ? (
          <button
            onClick={() => setAddHabit(true)}
            className="mt-6 bg-blue-600 hover:bg-blue-700 text-white font-semibold px-5 py-2 rounded-lg shadow transition"
          >
            üîÑ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –ø—Ä–∏–≤—ã—á–∫—É
          </button>
        ) : (
          <div className="mt-6">
            <h3 className="text-lg font-semibold mb-4">üß© –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø—Ä–∏–≤—ã—á–∫–∏:</h3>
            <HabitTracker />
          </div>
        )}
      </div>
    );
  }

  return (
    <div className="bg-white rounded-xl shadow p-6 space-y-6">
      <h2 className="text-xl font-bold text-center mb-4">üß† –ê–ª–≥–æ—Ä–∏—Ç–º –º—ã—à–ª–µ–Ω–∏—è</h2>

      <div>
        <p className="text-lg font-medium mb-2">{steps[stepIndex].question}</p>
        <textarea
          value={answers[stepIndex]}
          onChange={handleChange}
          rows={4}
          placeholder={steps[stepIndex].placeholder}
          className="w-full border rounded-lg p-3 focus:outline-none focus:ring focus:ring-blue-300"
        />
      </div>

      <div className="flex justify-between pt-4">
        <button
          onClick={handleBack}
          disabled={stepIndex === 0}
          className="px-4 py-2 bg-gray-300 text-gray-800 rounded hover:bg-gray-400 disabled:opacity-50"
        >
          ‚¨Ö –ù–∞–∑–∞–¥
        </button>
        <button
          onClick={handleNext}
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
        >
          {stepIndex === steps.length - 1 ? "–ó–∞–≤–µ—Ä—à–∏—Ç—å ‚úÖ" : "–î–∞–ª–µ–µ ‚û°"}
        </button>
      </div>
    </div>
  );
};

export default ThinkingAlgorithm;
