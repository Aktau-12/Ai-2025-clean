import React, { useState } from "react";
import HabitTracker from "../pages/HabitTracker"; // ‚úÖ –µ—Å–ª–∏ HabitTracker –ª–µ–∂–∏—Ç –≤ pages

const steps = [
  {
    question: "üß† –ö–∞–∫–∞—è —É —Ç–µ–±—è —Å–µ–π—á–∞—Å –∑–∞–¥–∞—á–∞ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞?",
    placeholder: "–û–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ, –≤ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö",
  },
  {
    question: "üîç –ß—Ç–æ —Ç—ã —É–∂–µ –ø—Ä–æ–±–æ–≤–∞–ª —Å–¥–µ–ª–∞—Ç—å?",
    placeholder: "–ù–∞–ø—Ä–∏–º–µ—Ä: —Å–æ–≤–µ—Ç–æ–≤–∞–ª—Å—è —Å –∫–µ–º-—Ç–æ, –∏—Å–∫–∞–ª –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, –ø—Ä–æ–±–æ–≤–∞–ª —Ä–µ—à–∏—Ç—å",
  },
  {
    question: "üéØ –ö–∞–∫–∞—è —Ç–≤–æ—è –∫–æ–Ω–µ—á–Ω–∞—è —Ü–µ–ª—å?",
    placeholder: "–ù–∞–ø—Ä–∏–º–µ—Ä: –Ω–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ, —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É, –¥–æ–±–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞",
  },
  {
    question: "üß© –ö–∞–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã —É —Ç–µ–±—è –µ—Å—Ç—å?",
    placeholder: "–õ—é–¥–∏, –∑–Ω–∞–Ω–∏—è, –≤—Ä–µ–º—è, –æ–ø—ã—Ç, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
  },
  {
    question: "üöß –ö–∞–∫–∏–µ —É —Ç–µ–±—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è?",
    placeholder: "–ù–∞–ø—Ä–∏–º–µ—Ä: –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏, –Ω–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏, —Å—Ç—Ä–∞—Ö –Ω–µ—É–¥–∞—á–∏",
  },
  {
    question: "üí° –ö–∞–∫–∏–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 3 –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–∏?",
    placeholder: "–ü—Ä–∏–¥—É–º–∞–π –ª—é–±—ã–µ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–µ–π—Å—Ç–≤–∏–π",
  },
  {
    question: "‚úÖ –ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç—ã –≤—ã–±–µ—Ä–µ—à—å —Å–µ–π—á–∞—Å?",
    placeholder: "–ù–∞–ø–∏—à–∏ —Ç–æ—Ç, —á—Ç–æ —Ç–µ–±–µ –±–ª–∏–∂–µ ‚Äî –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –∏–ª–∏ –ª–æ–≥–∏—á–µ—Å–∫–∏",
  },
  {
    question: "üìÖ –ö–æ–≥–¥–∞ —Ç—ã –Ω–∞—á–Ω—ë—à—å? –£—Å—Ç–∞–Ω–æ–≤–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è",
    placeholder: "–ù–∞–ø—Ä–∏–º–µ—Ä: –∑–∞–≤—Ç—Ä–∞ –≤ 10:00 –∏–ª–∏ '–ø–æ—Å–ª–µ –æ–±–µ–¥–∞ –≤ –ø—è—Ç–Ω–∏—Ü—É'",
  },
  {
    question: "üîÅ –î–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–∏–≤—ã—á–∫—É? –ß—Ç–æ–±—ã –¥–µ–ª–∞—Ç—å —ç—Ç–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ?",
    placeholder: "–î–∞/–ù–µ—Ç. –ú–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å—Ä–∞–∑—É –≤–Ω–µ—Å—Ç–∏ –≤ HabitTracker",
  },
];

const ThinkingAlgorithm = () => {
  const [stepIndex, setStepIndex] = useState(0);
  const [answers, setAnswers] = useState<string[]>(Array(steps.length).fill(""));

  const handleNext = () => {
    if (stepIndex < steps.length - 1) {
      setStepIndex((prev) => prev + 1);
    }
  };

  const handleBack = () => {
    if (stepIndex > 0) {
      setStepIndex((prev) => prev - 1);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const newAnswers = [...answers];
    newAnswers[stepIndex] = e.target.value;
    setAnswers(newAnswers);
  };

  const isLastStep = stepIndex === steps.length - 1;

  return (
    <div className="bg-white rounded-xl shadow p-6 space-y-4">
      <h2 className="text-xl font-bold text-center mb-4">üß† –ê–ª–≥–æ—Ä–∏—Ç–º –º—ã—à–ª–µ–Ω–∏—è</h2>

      <div>
        <p className="text-lg font-medium mb-2">{steps[stepIndex].question}</p>
        <textarea
          value={answers[stepIndex]}
          onChange={handleChange}
          rows={4}
          placeholder={steps[stepIndex].placeholder}
          className="w-full border rounded-lg p-3 focus:outline-none focus:ring focus:ring-blue-300"
        />
      </div>

      <div className="flex justify-between pt-4">
        <button
          onClick={handleBack}
          disabled={stepIndex === 0}
          className="px-4 py-2 bg-gray-300 text-gray-800 rounded hover:bg-gray-400 disabled:opacity-50"
        >
          ‚¨Ö –ù–∞–∑–∞–¥
        </button>
        {!isLastStep ? (
          <button
            onClick={handleNext}
            className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
          >
            –î–∞–ª–µ–µ ‚û°
          </button>
        ) : (
          <button
            onClick={() => alert("üéâ –ì–æ—Ç–æ–≤–æ! –í—Å–µ —à–∞–≥–∏ –ø—Ä–æ–π–¥–µ–Ω—ã.")}
            className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700"
          >
            –ó–∞–≤–µ—Ä—à–∏—Ç—å ‚úÖ
          </button>
        )}
      </div>

      {/* –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å HabitTracker –ø–æ –∂–µ–ª–∞–Ω–∏—é */}
      {answers[8]?.toLowerCase().includes("–¥–∞") && (
        <div className="mt-8">
          <h3 className="text-md font-semibold mb-2">üîÅ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–ª–æ–∫ –ü—Ä–∏–≤—ã—á–∫–∏:</h3>
          <HabitTracker />
        </div>
      )}
    </div>
  );
};

export default ThinkingAlgorithm;
