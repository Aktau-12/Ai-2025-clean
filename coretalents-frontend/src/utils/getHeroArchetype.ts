import archetypes from "../data/hero_archetypes.json";

interface UserProfile {
  mbti: string;
  bigfive: {
    O: number;
    C: number;
    E: number;
    A: number;
    N: number;
  };
  coretalents: string[];
}

export function getHeroArchetype(profile: UserProfile) {
  if (!profile || !profile.mbti || !profile.bigfive || !profile.coretalents) {
    console.error("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∞—Ä—Ö–µ—Ç–∏–ø–∞");
    return null;
  }

  const { mbti, bigfive, coretalents } = profile;
  let scores: Record<string, number> = {};

  archetypes.forEach((arch) => {
    let score = 0;

    // MBTI —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    if (arch.mbti_types.includes(mbti)) {
      score += 3;
    }

    // Big Five –ª–æ–≥–∏–∫–∞
    arch.bigfive_keywords?.forEach((trait) => {
      if (trait === "high_openness" && bigfive.O > 65) score += 2;
      if (trait === "low_extraversion" && bigfive.E < 40) score += 2;
      if (trait === "high_extraversion" && bigfive.E > 60) score += 2;
      if (trait === "high_conscientiousness" && bigfive.C > 60) score += 2;
      if (trait === "low_conscientiousness" && bigfive.C < 40) score += 2;
      if (trait === "high_agreeableness" && bigfive.A > 60) score += 2;
      if (trait === "high_emotional_stability" && bigfive.N < 40) score += 2;
    });

    // CoreTalents —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    arch.coretalents_traits?.forEach((trait) => {
      if (coretalents.includes(trait)) score += 1;
    });

    scores[arch.code] = score;
  });

  const top = Object.entries(scores).sort((a, b) => b[1] - a[1])[0];

  if (!top) {
    console.warn("‚ö†Ô∏è –ê—Ä—Ö–µ—Ç–∏–ø –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ '–ò—Å–∫–∞—Ç–µ–ª—è'");
    return archetypes.find((a) => a.code === "seeker"); // ‚Üê –∏–º—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∞—Ä—Ö–µ—Ç–∏–ø–∞
  }

  const selected = archetypes.find((a) => a.code === top[0]);
  console.log(`üéØ –í—ã–±—Ä–∞–Ω –∞—Ä—Ö–µ—Ç–∏–ø: ${selected?.name || "–ù–µ –Ω–∞–π–¥–µ–Ω"}`);

  return selected;
}
