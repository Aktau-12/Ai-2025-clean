// src/pages/BigFiveResults.tsx
import React, { useState, useEffect } from "react";
import {
  Radar,
  RadarChart,
  PolarGrid,
  PolarAngleAxis,
  PolarRadiusAxis,
  Tooltip,
  ResponsiveContainer,
} from "recharts";
import { useNavigate } from "react-router-dom";
import axios from "axios";

type BigFiveData = {
  [K in "O" | "C" | "E" | "A" | "N"]?: number;
};

export default function BigFiveResults() {
  const [data, setData] = useState<BigFiveData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const navigate = useNavigate();

  const API_URL = import.meta.env.VITE_API_URL;

  const traitLabels: Record<keyof BigFiveData, string> = {
    O: "–û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –æ–ø—ã—Ç—É",
    C: "–°–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
    E: "–≠–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏—è",
    A: "–î–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
    N: "–ù–µ–π—Ä–æ—Ç–∏–∑–º",
  };

  const traitDescriptions: Record<keyof BigFiveData, string> = {
    O: "–¢—ã —Å–∫–ª–æ–Ω–µ–Ω –∫ –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤—É, –≥–∏–±–∫–æ—Å—Ç–∏ –º—ã—à–ª–µ–Ω–∏—è –∏ –±–æ–≥–∞—Ç–æ–º—É –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏—é...",
    C: "–¢—ã –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–µ–Ω –∏ –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω –∫ –¥–µ—Ç–∞–ª—è–º...",
    E: "–¢—ã —á–µ—Ä–ø–∞–µ—à—å —ç–Ω–µ—Ä–≥–∏—é –∏–∑ –æ–±—â–µ–Ω–∏—è –∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è...",
    A: "–¢—ã —Å—Ç—Ä–µ–º–∏—à—å—Å—è –∫ –≥–∞—Ä–º–æ–Ω–∏–∏ –∏ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º...",
    N: "–¢—ã –≥–ª—É–±–æ–∫–æ –ø–µ—Ä–µ–∂–∏–≤–∞–µ—à—å –≤—Å—ë, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç...",
  };

  useEffect(() => {
    async function fetchData() {
      try {
        const response = await axios.get(`${API_URL}/tests/2/result`, {
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`,
          },
        });

        if (!response.data || Object.keys(response.data).length === 0) {
          setError("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã Big Five –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç.");
          return;
        }

        setData(response.data);
      } catch (err: any) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Big Five:", err.response?.data || err.message);
        setError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      } finally {
        setLoading(false);
      }
    }

    fetchData();
  }, []);

  if (loading) {
    return <div className="p-6 text-center">‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Big Five...</div>;
  }

  if (error) {
    return (
      <div className="p-6 text-center text-red-500 space-y-4">
        <p>{error}</p>
        <button
          onClick={() => navigate("/dashboard")}
          className="mt-4 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded transition"
        >
          üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
        </button>
      </div>
    );
  }

  if (!data) {
    return (
      <div className="p-6 text-center text-gray-500">
        –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
      </div>
    );
  }

  const chartData = (Object.keys(data) as (keyof BigFiveData)[])
    .filter((t) => typeof data[t] === "number" && !isNaN(data[t]!))
    .map((trait) => ({
      trait,
      label: traitLabels[trait],
      value: data[trait]!,
      description: traitDescriptions[trait],
    }))
    .sort((a, b) => b.value - a.value);

  return (
    <div className="mt-6 space-y-10">
      <div>
        <h3 className="text-lg font-semibold mb-4">
          üîç –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Big Five
        </h3>
        <ResponsiveContainer width="100%" height={400}>
          <RadarChart
            cx="50%"
            cy="50%"
            outerRadius="80%"
            data={chartData}
          >
            <PolarGrid />
            <PolarAngleAxis dataKey="label" />
            <PolarRadiusAxis domain={[1, 5]} />
            <Tooltip />
            <Radar
              name="–í—ã"
              dataKey="value"
              stroke="#8884d8"
              fill="#8884d8"
              fillOpacity={0.6}
            />
          </RadarChart>
        </ResponsiveContainer>
      </div>

      <div className="space-y-6">
        <h3 className="text-lg font-semibold">
          üß† –û–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–∏—Ö —á–µ—Ä—Ç –ª–∏—á–Ω–æ—Å—Ç–∏:
        </h3>
        {chartData.map((trait, idx) => (
          <div
            key={trait.trait}
            className="p-4 border rounded-lg bg-white shadow"
          >
            <h4 className="text-purple-700 font-bold text-md mb-2">
              {idx + 1}. {trait.label}
            </h4>
            <p className="text-gray-700">
              {trait.description}
            </p>
          </div>
        ))}
      </div>

      <div className="text-center">
        <button
          onClick={() => {
            localStorage.clear();
            navigate("/dashboard");
          }}
          className="mt-6 bg-blue-600 hover:bg-blue-700 text-white font-semibold px-5 py-2 rounded-lg shadow transition"
        >
          üîô –í –º–µ–Ω—é
        </button>
      </div>
    </div>
  );
}
